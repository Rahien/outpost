# Generated by Django 4.2 on 2023-05-04 18:23

from django.db import migrations


def create_perks(apps, schema_editor):
    Perk = apps.get_model('characters', 'Perk')
    Mastery = apps.get_model('characters', 'Mastery')

    Perk.objects.create(class_name="crashingTide", order=0, max_active=2,
                        description="Replace one <modMinus1/> card with two <pierce/> 3 <rolling/> cards")
    Perk.objects.create(class_name="crashingTide", order=1, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"+1 <target/>\" card")
    Perk.objects.create(class_name="crashingTide", order=2, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus1/> \"<shield/> 1\" <rolling/> card")
    Perk.objects.create(class_name="crashingTide", order=3, max_active=2,
                        description="Add two <modPlus1/> \"If you performed a <crashingTideTide/> action this round, <modPlus2/> instead\" cards")
    Perk.objects.create(class_name="crashingTide", order=4, max_active=2,
                        description="Add one <modPlus2/> <muddle/> card")
    Perk.objects.create(class_name="crashingTide", order=5, max_active=1,
                        description="Add one <modPlus1/> <disarm/> card")
    Perk.objects.create(class_name="crashingTide", order=6, max_active=2,
                        description="Add two \"<heal/>1, self\" <rolling/> cards")
    Perk.objects.create(class_name="crashingTide", order=7, max_active=1,
                        description="Ignore item <cardModMinus1/> effects and whenever you would gain <impair/>, prevent the condition")
    Perk.objects.create(class_name="crashingTide", order=8, max_active=1,
                        description="Whenever you declare a long rest during card selection, gain <shield/> 1 for the round")
    Perk.objects.create(class_name="crashingTide", order=9, max_active=3,
                        description="Gain advantage on all your attacks performed while occupying or targeting enemies occupying water hexes", connected=True)

    Mastery.objects.create(class_name="crashingTide", order=0,
                           description="Never suffer damage from attacks, and be targeted by at least five attacks")
    Mastery.objects.create(class_name="crashingTide", order=1,
                           description="At the start of each of your rests, have more active <crashingTideTide/> than cards in your discard pile")

    Perk.objects.create(class_name="deepWraith", order=0, max_active=1,
                        description="Remove two <modMinus1/> cards")
    Perk.objects.create(class_name="deepWraith", order=1, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <disarm/> card")
    Perk.objects.create(class_name="deepWraith", order=2, max_active=1,
                        description="Replace one <modMinus2/> card with one <modMinus1/> <stun/> card")
    Perk.objects.create(class_name="deepWraith", order=3, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus0/> \"<invisible/>, self\" card")
    Perk.objects.create(class_name="deepWraith", order=4, max_active=1,
                        description="Replace two <modPlus0/> cards with two <pierce/> 3 <rolling/> cards")
    Perk.objects.create(class_name="deepWraith", order=5, max_active=1,
                        description="Replace two <modPlus1/> cards with two <modPlus2/> cards")
    Perk.objects.create(class_name="deepWraith", order=6, max_active=1,
                        description="Replace three <modPlus1/> cards with three <modPlus1/> <curse/> cards")
    Perk.objects.create(class_name="deepWraith", order=7, max_active=3,
                        description="Add two <modPlus1/> \"Gain 1 <trophy/>\" cards")
    Perk.objects.create(class_name="deepWraith", order=8, max_active=1,
                        description="Ignore scenario effects and remove two <modPlus0/> cards")
    Perk.objects.create(class_name="deepWraith", order=9, max_active=1,
                        description="Whenever you long rest, you may <loot/> one adjacent hex. If you gain any loot tokens, gain 1 <trophy/>")
    Perk.objects.create(class_name="deepWraith", order=10, max_active=1,
                        description="At the start of each scenario, gain 2 <trophy/>")
    Perk.objects.create(class_name="deepWraith", order=11, max_active=3, connected=True,
                        description="While you have <invisible/>, gain advantage on all your attacks")

    Mastery.objects.create(class_name="deepWraith", order=0,
                           description="Perform all your attacks with advantage")
    Mastery.objects.create(class_name="deepWraith", order=1,
                           description="Infuse <darkness/> each round")

    Perk.objects.create(class_name="frozenFist", order=0, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <disarm/> card")
    Perk.objects.create(class_name="frozenFist", order=1, max_active=1,
                        description="Replace one <modMinus1/> card with one <modPlus1/> card")
    Perk.objects.create(class_name="frozenFist", order=2, max_active=1,
                        description="Replace one <modMinus2/> card with one <modPlus0/> card")
    Perk.objects.create(class_name="frozenFist", order=3, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus1/> \"<shield/>1\" <rolling/> card")
    Perk.objects.create(class_name="frozenFist", order=4, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus1/> <frost/>/<earth/> card")
    Perk.objects.create(class_name="frozenFist", order=5, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus2/> \"create one 1-hex icy terrain tile in a featureless hex adjacent to  the target\" card")
    Perk.objects.create(class_name="frozenFist", order=6, max_active=1,
                        description="Add one <modPlus3/> card")
    Perk.objects.create(class_name="frozenFist", order=7, max_active=3,
                        description="Add two \"<heal/>1, self\" <rolling/> cards")
    Perk.objects.create(class_name="frozenFist", order=8, max_active=1,
                        description="Ignore item <cardModMinus1/> effects, and whenever you enter icy terrain with a move ability, you may ignore the effect to add +1 <move/>")
    Perk.objects.create(class_name="frozenFist", order=9, max_active=1,
                        description="Whenever you heal from a long rest, you may <consumeFrost/>/<consumeEarth/> to add +2<heal/> ")
    Perk.objects.create(class_name="frozenFist", order=10, max_active=2, connected=True,
                        description="Once each scenario, when you would suffer <damage/>, you may negate the <damage/>")

    Mastery.objects.create(class_name="frozenFist", order=0,
                           description="<recover/> at least one card from your discard pile each round")
    Mastery.objects.create(class_name="frozenFist", order=1,
                           description="Enter at least ten different hexes with one move ability, then cause one enemy to suffer at least <damage/> 10 with one attack ability in the same turn")

    Perk.objects.create(class_name="hive", order=0, max_active=1,
                        description="Remove one <modMinus2/> card and one <modPlus1/> card")
    Perk.objects.create(class_name="hive", order=1, max_active=3,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"After this attack ability, grant one of your summons: <move/> 2\" card")
    Perk.objects.create(class_name="hive", order=2, max_active=3,
                        description="Replace one <modPlus0/> card with one <modPlus1/> \"After this attack ability, <hiveTransfer/>\" card")
    Perk.objects.create(class_name="hive", order=3, max_active=3,
                        description="Add one <modPlus1/> \"<heal/>1, self\" card")
    Perk.objects.create(class_name="hive", order=4, max_active=2,
                        description="Add one <modPlus2/> <muddle/> card")
    Perk.objects.create(class_name="hive", order=5, max_active=1,
                        description="Add two <poison/> <rolling/> cards")
    Perk.objects.create(class_name="hive", order=6, max_active=1,
                        description="Add two <wound/> <rolling/> cards")
    Perk.objects.create(class_name="hive", order=7, max_active=2, connected=True,
                        description="Whenever you long rest, you may do so on any initiative value, choosing your initiative after all ability cards have been revealed, and you decide how your summons perform their abilities for the round")
    Perk.objects.create(class_name="hive", order=8, max_active=1,
                        description="At the end of each of your short rests, you may <hiveTransfer/>")
    Perk.objects.create(class_name="hive", order=9, max_active=1,
                        description="Whenever you would gain <bleed/> prevent the condition")

    Mastery.objects.create(class_name="hive", order=0,
                           description="<hiveTransfer/> each round")
    Mastery.objects.create(class_name="hive", order=1,
                           description="<hiveTransfer/> into four different summons in one round")

    Perk.objects.create(class_name="infuser", order=0, max_active=1,
                        description="Replace one <modMinus2/> card with one <modMinus1/> and one <modMinus1/> <air/> <earth/> <darkness/> card")
    Perk.objects.create(class_name="infuser", order=1, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <air/>/<earth/> card")
    Perk.objects.create(class_name="infuser", order=2, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <air/>/<darkness/> card")
    Perk.objects.create(class_name="infuser", order=3, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <earth/>/<darkness/> card")
    Perk.objects.create(class_name="infuser", order=4, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus2/> card")
    Perk.objects.create(class_name="infuser", order=5, max_active=2,
                        description="Replace one <modPlus0/> card with three \"Move one waning element to strong\" <rolling/> cards")
    Perk.objects.create(class_name="infuser", order=6, max_active=2,
                        description="Add two \"+1 <attack/> for each pair of active <infusion/>\" <rolling/> cards")
    Perk.objects.create(class_name="infuser", order=7, max_active=1,
                        description="Ignore scenario effects")
    Perk.objects.create(class_name="infuser", order=8, max_active=2, connected=True,
                        description="Ignore item <cardModMinus1/> effects. Whenever you become exhausted, keep all your active bonuses in play, with your summons acting on initiative 99 each round")
    Perk.objects.create(class_name="infuser", order=9, max_active=1,
                        description="Whenever you short rest, you may <consumeAny/> to <recover/> one spent <hand/> or <twoHand/> item")
    Perk.objects.create(class_name="infuser", order=10, max_active=1,
                        description="Once each scenario, during ordering of initiative, after all ability cards have been revealed, <any/>")

    Mastery.objects.create(class_name="infuser", order=0,
                           description="Have five active <infusion/> bonuses")
    Mastery.objects.create(class_name="infuser", order=1,
                           description="Kill at least four enemies, but never attack")

    Perk.objects.create(class_name="metalMosaic", order=0, max_active=3,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"<metalMosaicPressureUp/> or <metalMosaicPressureDown/>\" card")
    Perk.objects.create(class_name="metalMosaic", order=1, max_active=2,
                        description="Replace one <modMinus1/> card with one \"<shield/>1\" <rolling/>  card")
    Perk.objects.create(class_name="metalMosaic", order=2, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus0/> \"The target and all enemies adjacent to it suffer <damage/> 1\" card")
    Perk.objects.create(class_name="metalMosaic", order=3, max_active=2,
                        description="Replace two <modPlus0/> cards with one <pierce/> 3 <rolling/> and one \"<retaliate/>2\" <rolling/> card")
    Perk.objects.create(class_name="metalMosaic", order=4, max_active=2,
                        description="Add one <modPlus1/> \"<heal/>2, self\" card")
    Perk.objects.create(class_name="metalMosaic", order=5, max_active=1,
                        description="Add one <modPlus3/> card")
    Perk.objects.create(class_name="metalMosaic", order=6, max_active=1,
                        description="Ignore <cardModMinus1/> effects and add two <modPlus1/> cards")
    Perk.objects.create(class_name="metalMosaic", order=7, max_active=1,
                        description="Whenever you long rest, you may <metalMosaicPressureUp/> or <metalMosaicPressureDown/>")
    Perk.objects.create(class_name="metalMosaic", order=8, max_active=1,
                        description="Whenever you would gain <poison/>, you may suffer <damage/> 1 to prevent the condition")
    Perk.objects.create(class_name="metalMosaic", order=9, max_active=3, connected=True,
                        description="Once each scenario, when you would become exhausted, instead gain <stun/> and <invisible/>, lose all you cards, <recover/> four lost cards, and then discard the recovered cards")

    Mastery.objects.create(class_name="metalMosaic", order=0,
                           description="Never attack")
    Mastery.objects.create(class_name="metalMosaic", order=1,
                           description="For four consecutive rounds, move the pressure gauge up or down three levels from where it started the round (<metalMosaicPressureLow/> to <metalMosaicPressureOver/> or vice versa)")

    Perk.objects.create(class_name="painConduit", order=0, max_active=2,
                        description="Remove two <modMinus1/> cards")
    Perk.objects.create(class_name="painConduit", order=1, max_active=1,
                        description="Replace one <modMinus2/> card with one <modMinus2/> <curse/> <curse/> card")
    Perk.objects.create(class_name="painConduit", order=2, max_active=1,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <disarm/> card")
    Perk.objects.create(class_name="painConduit", order=3, max_active=3,
                        description="Replace one <modPlus0/> card with one <modPlus1/> <fire/>/<air/> card")
    Perk.objects.create(class_name="painConduit", order=4, max_active=1,
                        description="Replace one <modPlus0/> card with one <modPlus2/> card")
    Perk.objects.create(class_name="painConduit", order=5, max_active=1,
                        description="Replace three <modPlus1/> cards with three <modPlus1/> <curse/> cards")
    Perk.objects.create(class_name="painConduit", order=6, max_active=2,
                        description="Add three \"<heal/> 1, self\" <rolling/> cards")
    Perk.objects.create(class_name="painConduit", order=7, max_active=2,
                        description="Add one <modPlus0/> \"Add +1 <attack/> for each negative condition you have\" card")
    Perk.objects.create(class_name="painConduit", order=8, max_active=1,
                        description="Ignore scenario effects and add two <modPlus1/> cards")
    Perk.objects.create(class_name="painConduit", order=9, max_active=1,
                        description="Each round in which you long rest, you may ignore all negative conditions you have. If you do, they cannot be removed that round")
    Perk.objects.create(class_name="painConduit", order=10, max_active=1,
                        description="Whenever you become exhausted, first perform <curse/>, <target/> all, <range/> 3")
    Perk.objects.create(class_name="painConduit", order=11, max_active=2, connected=True,
                        description="Increase your maximum hit point value by 5")

    Mastery.objects.create(class_name="painConduit", order=0,
                           description="Cause other figures to suffer a total of at least <damage/> 40 in one round")
    Mastery.objects.create(class_name="painConduit", order=1,
                           description="Start a turn with <bleed/>, <brittle/>, <bane/>, <poison/>, <immobilize/>, <disarm/>, <stun/> and <muddle/>")

    Perk.objects.create(class_name="pyroclast", order=0, max_active=1,
                        description="Remove two <modMinus1/> cards")
    Perk.objects.create(class_name="pyroclast", order=1, max_active=1,
                        description="Remove one <modMinus2/> card")
    Perk.objects.create(class_name="pyroclast", order=2, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus1/> <bleed/> card")
    Perk.objects.create(class_name="pyroclast", order=3, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"Create one 1-hex hazardous terrain tile in a featureless hex adjacent to the target\" card")
    Perk.objects.create(class_name="pyroclast", order=4, max_active=2,
                        description="Replace two <modPlus0/> cards with two <push/> 2 <rolling/> cards")
    Perk.objects.create(class_name="pyroclast", order=5, max_active=1,
                        description="Replace two <modPlus1/> cards with two <modPlus2/> cards")
    Perk.objects.create(class_name="pyroclast", order=6, max_active=2,
                        description="Add one <modPlus1/> <fire/>/<earth/> card")
    Perk.objects.create(class_name="pyroclast", order=7, max_active=1,
                        description="Add two <modPlus1/> <muddle/> <rolling/> cards")
    Perk.objects.create(class_name="pyroclast", order=8, max_active=1,
                        description="Ignore scenario effects")
    Perk.objects.create(class_name="pyroclast", order=9, max_active=1,
                        description="Whenever you long rest, you may destroy one adjacent obstacle to gain <ward/>")
    Perk.objects.create(class_name="pyroclast", order=10, max_active=1,
                        description="Whenever you short rest, you may <consumeFire/> to perform <bleed/>, <target/> 1 enemy occupying or adjacent to hazardous terrain")
    Perk.objects.create(class_name="pyroclast", order=11, max_active=3, connected=True,
                        description="You and all allies are unaffected by hazardous terrain you create")

    Mastery.objects.create(class_name="pyroclast", order=0,
                           description="Create or destroy at least one obstacle or hazardous terrain each round")
    Mastery.objects.create(class_name="pyroclast", order=1,
                           description="Move enemies through six different hexes of hazardous terrain you created in one turn")

    Perk.objects.create(class_name="shattersong", order=0, max_active=1,
                        description="Remove four <modPlus0/> cards")
    Perk.objects.create(class_name="shattersong", order=1, max_active=2,
                        description="Replace two <modMinus1/> cards with two <modPlus0/> \"Reveal the top card of the target's monster ability deck\" cards")
    Perk.objects.create(class_name="shattersong", order=2, max_active=1,
                        description="Replace one <modMinus2/> card with one <modMinus1/> <stun/> card")
    Perk.objects.create(class_name="shattersong", order=3, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus0/> <brittle/> card")
    Perk.objects.create(class_name="shattersong", order=4, max_active=2,
                        description="Replace one <modPlus1/> card with two <modPlus2/> <air/> / <light/> cards")
    Perk.objects.create(class_name="shattersong", order=5, max_active=2,
                        description="Add one \"<heal/> 2, <bless/>, <target/> 1 ally\" <rolling/> card")
    Perk.objects.create(class_name="shattersong", order=6, max_active=3,
                        description="Add one <modPlus1/> \"gain 1 <shattersongResonance/>\" card")
    Perk.objects.create(class_name="shattersong", order=7, max_active=1,
                        description="Ignore scenario effects")
    Perk.objects.create(class_name="shattersong", order=8, max_active=2, connected=True,
                        description="Whenever you short rest, you may <consumeAir/> to perform <strengthen/>, <range/>3, and <consumeLight/> to perform <bless/>, <range/>3")
    Perk.objects.create(class_name="shattersong", order=9, max_active=1,
                        description="At teh start of each scenario, you may gain <brittle/> to gain 2 <shattersongResonance/>")
    Perk.objects.create(class_name="shattersong", order=10, max_active=1,
                        description="Whenever a new room is revealed, you may reveal the top card of both the monster attack modifier deck and all allies' attack modifier decks")

    Mastery.objects.create(class_name="shattersong", order=0,
                           description="Always have 0 <shattersongResonance/> directly before you gain <shattersongResonance/> at the end of your turns")
    Mastery.objects.create(class_name="shattersong", order=1,
                           description="Spend 5 <shattersongResonance/> on each of five different Wave abilities")

    Perk.objects.create(class_name="snowdancer", order=0, max_active=3,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"<heal/>1, <target/>1 ally\" card")
    Perk.objects.create(class_name="snowdancer", order=1, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> <immobilize/> card")
    Perk.objects.create(class_name="snowdancer", order=2, max_active=2,
                        description="Add two <modPlus1/> <ice/>/<air/> cards")
    Perk.objects.create(class_name="snowdancer", order=3, max_active=2,
                        description="Replace two <modPlus0/> cards with two \"If this action forces the target to move, it suffers <damage/> 1\" <rolling/> cards")
    Perk.objects.create(class_name="snowdancer", order=4, max_active=2,
                        description="Replace one <modPlus0/> card with one <modPlus1/> \"<strengthen/>,<target/>1 ally\" card")
    Perk.objects.create(class_name="snowdancer", order=5, max_active=2,
                        description="Add one \"<heal/>1, <ward/>,<target/>1 ally\" <rolling/> card")
    Perk.objects.create(class_name="snowdancer", order=6, max_active=1,
                        description="Whenever you long rest, you may <ice/>/<air/>")
    Perk.objects.create(class_name="snowdancer", order=7, max_active=2, connected=True,
                        description="Whenever you short rest, you may <consumeIce/> to perform <regenerate/>, <range/>3 and <consumeAir/> to perform <ward/>, <range/>3")
    Perk.objects.create(class_name="snowdancer", order=8, max_active=2, connected=True,
                        description="At the start of each scenario, all enemies gain <muddle/>. Whenever a new room is revealed, all enemies in the newly revealed room gain <muddle/>")

    Mastery.objects.create(class_name="snowdancer", order=0,
                           description="Cause at least one ally or enemy to move each round")
    Mastery.objects.create(class_name="snowdancer", order=1,
                           description="Ensure the first ally to suffer <damage/> each round, directly before suffering the <damage/> has at least one <condition/> you applied")

    Perk.objects.create(class_name="trapper", order=0, max_active=1,
                        description="Remove one <modMinus2/> card")
    Perk.objects.create(class_name="trapper", order=1, max_active=2,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"Create one <heal/>2 trap in an empty hex adjacent to the target\" card")
    Perk.objects.create(class_name="trapper", order=2, max_active=3,
                        description="Replace one <modMinus1/> card with one <modPlus0/> \"Create one <damage/>1 trap in an empty hex adjacent to the target\" card")
    Perk.objects.create(class_name="trapper", order=3, max_active=3,
                        description="Replace two <modPlus0/> cards with two <modPlus0/> \"Add <damage/>2 trap or <heal/> 2 to a trap within <range/> 2 of you\" cards")
    Perk.objects.create(class_name="trapper", order=4, max_active=2,
                        description="Replace two <modPlus1/> cards with two <modPlus2/> <immobilize/> cards")
    Perk.objects.create(class_name="trapper", order=5, max_active=3,
                        description="Add two \"Add <push/> 2 or <pull/> 2\" <rolling/> cards")
    Perk.objects.create(class_name="trapper", order=6, max_active=1,
                        description="Ignore negative scenario effects")
    Perk.objects.create(class_name="trapper", order=7, max_active=1,
                        description="Whenever you long rest, you may create one <damage/> 1 trap in an adjacent empty hex")
    Perk.objects.create(class_name="trapper", order=8, max_active=1,
                        description="Whenever you enter a hex with a trap, you may choose not to spring the trap")
    Perk.objects.create(class_name="trapper", order=9, max_active=1,
                        description="At the start of each scenario, you may create one <damage/> 2 trap in an adjacent empty hex")

    Mastery.objects.create(class_name="trapper", order=0,
                           description="Have one <heal/> trap on the map with value of at least 20")
    Mastery.objects.create(class_name="trapper", order=1,
                           description="Move enemies through seven or more traps with one ability")


def remove_perks(apps, schema_editor):
    Perk = apps.get_model('characters', 'Perk')
    Mastery = apps.get_model('characters', 'Mastery')
    Perk.objects.filter(class_name__in=['crashingTide', 'deepWraith', 'trapper',
                        'snowdancer', 'hive', 'shattersong', 'pyroclast', 'painConduit', 'metalMosaic', 'infuser', 'frozenFist']).delete()
    Mastery.objects.filter(class_name__in=['crashingTide', 'deepWraith', 'trapper',
                                           'snowdancer', 'hive', 'shattersong', 'pyroclast', 'painConduit', 'metalMosaic', 'infuser', 'frozenFist']).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('characters', '0012_fix_perk_connection'),
    ]

    operations = [
        migrations.RunPython(create_perks, remove_perks),
    ]
